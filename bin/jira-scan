#!/usr/bin/env ruby
#
# This file is part of JiraScan
# https://github.com/bcoles/jira_scan
#

require 'jira_scan'
require 'optparse'
require 'terminal-table'
require 'resolv'

def banner
  puts "
       _ _            _____                 
      | (_)          / ____|                
      | |_ _ __ __ _| (___   ___ __ _ _ __  
  _   | | | '__/ _` |\\___ \\ / __/ _` | '_ \\ 
 | |__| | | | | (_| |____) | (_| (_| | | | |
  \\____/|_|_|  \\__,_|_____/ \\___\\__,_|_| |_|
                               version 0.0.2"
  puts
  puts '-' * 60
end

banner
options = {}
opts = OptionParser.new do |o|
  o.banner = 'Usage: jira-scan [options]'

  o.on('-u URL', '--url URL', 'Jira URL to scan') do |v|
    unless v.match(%r{\Ahttps?://})
      puts "- Invalid URL: #{v}"
      exit(1)
    end
    options[:url] = v
  end

  o.on('-s', '--skip', 'Skip check for Jira') do
    options[:skip] = true
  end

  o.on('-v', '--verbose', 'Enable verbose output') do
    options[:verbose] = true
  end

  o.on('-h', '--help', 'Show this help') do
    puts opts
    exit
  end
end

opts.parse!

$VERBOSE = true unless options[:verbose].nil?
@check = true unless options[:skip]

if options[:url].nil?
 puts opts
 exit(1)
end

def scan(url)
  puts "Scan started at #{Time.now.getutc}"
  puts "URL: #{url}"

  # parse URL
  target = nil
  begin
    target = URI::parse(url.split('?').first)
  rescue
    puts "- Could not parse target URL: #{url}"
  end
  exit(1) if target.nil?

  # resolve IP address
  begin
    ip = Resolv.getaddress(target.host).to_s
    puts "IP: #{ip}" unless ip.nil?
  rescue
    puts "- Could not resolve hostname #{target.host}"
  end

  puts "Port: #{target.port}"
  puts '-' * 60

  # Check if the URL is Jira
  if @check
    unless JiraScan::isJira(url)
      puts '- Jira not found'
      exit(1)
    end
    puts '+ Found Jira'
  end

  # Get Jira version
  version = JiraScan::getVersion(url)
  puts "+ Version: #{version}" if version

  # Dev mode enabled
  dev_mode = JiraScan::devMode(url)
  puts '+ Dev mode is enabled' if dev_mode

  # User registration enabled
  register = JiraScan::userRegistration(url)
  puts '+ User registration is enabled' if register

  # Check if User Picker Browser is accessible
  user_picker = JiraScan::userPickerBrowser(url)
  if user_picker
    puts '+ User Picker Browser is available'
    # Retrieve list of first 1,000 users 
    users = JiraScan::getUsersFromUserPicker(url)
    unless users.empty?
      puts "+ Found users (#{users.length}):"
      table = Terminal::Table.new :headings => ['Username', 'Full Name', 'Email'], :rows => users
      puts table
    end
  end

  # Check if REST User Picker is accessible
  rest_user_picker = JiraScan::restUserPicker(url)
  puts "+ REST UserPicker is available" if rest_user_picker

  # Check if REST Group User Picker is accessible
  rest_group_user_picker = JiraScan::restGroupUserPicker(url)
  puts "+ REST GroupUserPicker is available" if rest_group_user_picker

  # Check if ViewUserHover.jspa is accessible
  view_user_hover = JiraScan::viewUserHover(url)
  puts "+ ViewUserHover.jspa is available" if view_user_hover

  # Check if META-INF contents are accessible
  meta_inf = JiraScan::metaInf(url)
  puts '+ META-INF directory contents are accessible' if meta_inf

  # Retrieve list of dashboards
  dashboards = JiraScan::getDashboards(url)
  unless dashboards.empty?
    puts "+ Found dashboards (#{dashboards.length}):"
    table = Terminal::Table.new :headings => ['ID', 'Name'], :rows => dashboards
    puts table
  end

  # Retrieve list of popular filters
  filters = JiraScan::getPopularFilters(url)
  unless filters.empty?
    puts "+ Found popular filters (#{filters.length}):"
    table = Terminal::Table.new :headings => ['Filter Name'], :rows => filters
    puts table
  end

  # Retrieve list of field names
  field_names = JiraScan::getFieldNames(url)
  unless field_names.empty?
    puts "+ Found field names (#{field_names.length}):"
    table = Terminal::Table.new :headings => ['Name', 'ID', 'Key', 'IsShown', 'Last Viewed'], :rows => field_names
    puts table
  end

  puts "Scan finished at #{Time.now.getutc}"
  puts '-' * 60
end

scan(options[:url])
